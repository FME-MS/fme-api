openapi: "3.1.0"
info:
  title: "fme_service API"
  description: "fme_service API"
  version: "1.0.0"
servers:
  - url: "https://fme_service"
paths:
  /inventory/items:
    post:
      tags: [ Inventory ]
      summary: "Create a new inventory item"
      operationId: "createItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
      responses:
        '201':
          description: "Item created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
    get:
      tags: [ Inventory ]
      summary: "Get all inventory items with optional pagination"
      operationId: "getAllItems"
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: labelId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Paged list of items"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedItemResponse"
  /inventory/categories:
    get:
      tags: [ Inventory ]
      summary: "Get all item categories"
      operationId: "getAllItemCategories"
      responses:
        '200':
          description: "List of item categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemCategory"
    post:
      tags:
        - Inventory
      summary: "Create a new item category"
      operationId: "createCategory"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
        required: true
      responses:
        201:
          description: "Category created"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CreateItemResponse"
    delete:
      tags:
        - Inventory
      summary: "Delete an inventory category"
      operationId: "deleteCategory"
      responses:
        200:
          description: "Category deleted"
        400:
          description: "There are still items in this category, cannot delete"

  /inventory/items/{uuid}:
    parameters:
      - name: "uuid"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "uuid"
    get:
      tags:
        - Inventory
      summary: "Get inventory item by ID"
      operationId: "getItemById"
      responses:
        "200":
          description: "Inventory item"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/InventoryItem"
    put:
      tags:
        - Inventory
      summary: "Update inventory item info"
      operationId: "updateItemInfo"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateItemInfoRequest"
      responses:
        "200":
          description: "Updated item"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/InventoryItem"
    delete:
      tags:
        - Inventory
      summary: "Delete an inventory item"
      operationId: "deleteItem"
      responses:
        "204":
          description: "Item deleted"

  /inventory/items/{uuid}/files:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags: [Inventory]
      summary: "Upload file to an inventory item"
      operationId: "uploadItemFile"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: "File uploaded"

    get:
      tags: [Inventory]
      summary: "List files attached to an inventory item"
      operationId: "listItemFiles"
      responses:
        '200':
          description: "List of files"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemFileMetadata"

  /inventory/items/{uuid}/files/{fileId}:
    delete:
      tags: [Inventory]
      summary: "Delete a file from an inventory item"
      operationId: "deleteItemFile"
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: "File deleted"

components:
  schemas:
    ItemCategory:
      type: object
      description: "An item category for grouping inventory items"
      properties:
        categoryId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time
    ItemCondition:
      type: "object"
      properties:
        condition:
          type: "string"
          enum:
            - "NOT_DAMAGED"
            - "DAMAGED_WEARABLE"
            - "DAMAGED_NOT_WEARABLE"
        comment:
          type: "string"
    InventoryStatusEntity:
      type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        status:
          type: "string"
          enum:
            - "AVAILABLE"
            - "IN_USE"
            - "RESERVED"
            - "LOST"
        managedByUserId:
          type: "string"
          format: "uuid"
        changedByUserId:
          type: "string"
          format: "uuid"
    InventoryItem:
      type: "object"
      properties:
        uuid:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        description:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        itemCondition:
          $ref: "#/components/schemas/ItemCondition"
        currentStatus:
          $ref: "#/components/schemas/InventoryStatusEntity"
        statusHistory:
          type: "array"
          items:
            $ref: "#/components/schemas/InventoryStatusEntity"
        version:
          type: "integer"
          format: "int64"
    CreateItemRequest:
      type: object
      required: [ name, categoryId, location ]
      properties:
        name:
          type: string
        description:
          type: string
        categoryId:
          type: string
          format: uuid
        location:
          $ref: "#/components/schemas/ItemLocation"
        currentHolderUserId:
          type: string
          format: uuid
    CreateItemResponse:
      type: "object"
      properties:
        item:
          $ref: "#/components/schemas/InventoryItem"
    UpdateItemInfoRequest:
      type: "object"
      properties:
        item:
          $ref: "#/components/schemas/InventoryItem"
        managedByUserId:
          type: "string"
          format: "uuid"
    PageMetadata:
      type: "object"
      properties:
        page:
          type: "integer"
          format: "int32"
        pageSize:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int64"
        totalPages:
          type: "integer"
          format: "int32"
    PagedItemResponse:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/InventoryItem"
        pageMetadata:
          $ref: "#/components/schemas/PageMetadata"
    ItemFileMetadata:
      type: object
      properties:
        fileId:
          type: string
          format: uuid
        fileName:
          type: string
        contentType:
          type: string
        uploadedAt:
          type: string
          format: date-time
        url:
          type: string
          description: "Pre-signed or public download URL"
    ItemLocation:
      type: string
      enum:
        - HJK
        - IFAS
        - WDS
        - VERLIEHEN
        - VERLIEHEN_EXTERN
        - OTHER