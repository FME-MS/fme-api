openapi: 3.1.0
info:
  title: Group Api
  description: Group Api
  version: 1.0.0-SNAPSHOT
servers:
  - url: 'http://localhost:8080/api'
paths:
  /groups:
    post:
      operationId: "createGroup"
      tags:
        - Group
      description: "Create a new group"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
      responses:
        201:
          description: "Group created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupResponse"
        default:
          description: "Unexpected error"

  /groups/mine:
    get:
      tags:
        - Group
      summary: "Get groups the current user belongs to"
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: "List of groups"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupWithRole'

  /groups/{groupId}:
    parameters:
      - name: groupId
        required: true
        in: path
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Group
      operationId: "getGroup"
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: "Get the information to a group by groupId"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupResponse"
        404:
          description: "No group with groupId found"
        default:
          description: "Not authorized"
    put:
      operationId: "updateGroup"
      tags:
        - Group
      description: "Update a group name or info"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
      responses:
        200:
          description: "Updated group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupResponse"
        default:
          description: "Unexpected error"
    delete:
      tags:
        - Group
      operationId: "deleteGroup"
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Group deleted

  /groups/{groupId}/members:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Group
      summary: "List members of a group"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: "List of members"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMember'
    post:
      tags:
        - Group
      summary: "Add user to group"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupMemberRequest'
      responses:
        '201':
          description: "Member added"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'

  /groups/{groupId}/members/{userId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: userId
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - Group
      summary: "Change role of a group member"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupMemberRoleRequest'
      responses:
        '200':
          description: Updated member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
    delete:
      operationId: removeMember
      tags:
        - Group
      summary: "Remove member from group"
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Member removed

components:
  schemas:
    CreateGroupRequest:
      type: object
      description: "Simple Group object"
      properties:
        name:
          type: string
          maxLength: 100

    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string

    GroupResponse:
      type: object
      description: "Simple Group object"
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time

    GroupRole:
      type: string
      enum: [ GROUP_MEMBER, GROUP_ADMIN ]

    GroupWithRole:
      allOf:
        - $ref: '#/components/schemas/GroupResponse'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/GroupRole'

    GroupMember:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        username:
          type: string
        role:
          $ref: '#/components/schemas/GroupRole'

    AddGroupMemberRequest:
      type: object
      required: [ userId, role ]
      properties:
        userId:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/GroupRole'
        comment:
          type: string

    UpdateGroupMemberRoleRequest:
      type: object
      required: [ role ]
      properties:
        role:
          $ref: '#/components/schemas/GroupRole'
        comment:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
