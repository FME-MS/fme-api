name: Generate & Publish TS Clients

permissions:
  contents: read    # so your build steps can clone and read code
  packages: write   # so you can publish to GitHub Packages

on:
  push:
    branches:
      - develop
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Node.js 22
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          registry-url: https://npm.pkg.github.com
          scope: '@fme-ms'

      - name: Maven package (generate TS)
        run: mvn clean install -P generate-npm -DskipTests


      - name: Get project version
        id: get-version
        run: |
          echo "VERSION=$(mvn help:evaluate \
            -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Publish npm packages
        working-directory: .
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth login --with-token <<< "${GITHUB_TOKEN}"
          
          echo "Looking for generated clients in openapi-codegen/…"
          cp .npmrc ./openapi-codegen/.npmrc
          
          for pkg in openapi-codegen/*/; do
          pkg_name=$(basename "${dir%/}")
            if [ -f "$pkg/package.json" ]; then
              echo "→ Publishing $pkg"
              (
              cd "$pkg"
          
              NAME=$(jq -r .name package.json)
              VERSION=$(jq -r .version package.json)
              REPO=fme-api
              OWNER=${GITHUB_REPOSITORY_OWNER}
              echo "   • Deleting existing snapshot versions of $OWNER for $NAME@$VERSION…"
              echo "Calling route: /${OWNER}/${REPO}/pkgs/npm/${pkg_name}/versions"
              gh api \
                /${OWNER}/${REPO}/pkgs/npm/${pkg_name}/versions \
                -q ".[] | select(.metadata.package_version==\"${VERSION}\") | .id" \
                | while read id; do
                    echo "     – deleting version id $id"
                    echo "Calling route: /orgs/${OWNER}/packages/npm/${pkg}/${id}"
                    gh api -X DELETE \
                      /orgs/${OWNER}/packages/npm/${pkg}/versions/${id}
                  done

                # 4) Publish the new one
                echo "   • Publishing $NAME@$VERSION"
              npm install
              cd dist
              npm publish
              )
            fi
          done
